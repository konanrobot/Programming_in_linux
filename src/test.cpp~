#include <stdio.h>
#include <Point.h>
#include <boost/lexical_cast.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <boost/config.hpp>  
#include <boost/graph/adjacency_list.hpp>  
#include <boost/tuple/tuple.hpp>  
//#include <boost/timer.hpp>
#include <boost/progress.hpp>
#include <boost/bind.hpp>
#include <boost/signals2.hpp>
#include <boost/random.hpp>
#include <boost/thread.hpp>
#include <boost/timer/timer.hpp>
#include <boost/smart_ptr.hpp>
#include <memory>
using namespace std;
//using namespace boost::timer;
vector<string> createVector_98()
{
    vector<string> vec;
    for (int i = 0; i < 10; ++i){
            vec.emplace_back("helloworld");
    }
    return vec;
}

vector<string> createVector_11()
{
    vector<string> vec;
    for (int i = 0; i < 100; ++i){
        vec.emplace_back("helloworld");
    }
    return move(vec);
}

int main()
{
printf("Hello YEL!\n");
int pub_point_num_=0;
//int Point_base::pub_point_num_=0; //非常量的类静态成员变量要在类的外边初始化
//int Point_base::pri_point_num_=0;
Point_base A;
//boost_test
  using boost::lexical_cast;
  int a= lexical_cast<int>("123456");
  double b = lexical_cast<double>("123.456");
  std::cout << a << std::endl;
  std::cout << b << std::endl;
/*--------------------shared_ptr测试1.1--------------------------------*/
boost::shared_ptr<int> sp(new int(10));
assert(sp.unique());
boost::shared_ptr<int> sp2=sp;//？？？不成功
assert(sp==sp2 && sp.use_count()==2);
*sp2=100;
assert(*sp=100);
sp.reset();
assert(!sp);
cout<<"I am shared_ptr"<<endl;
//boost::timer::auto_cpu_timer timer;
const int TEST_TIMES = 100;

    vector<string> result;

    boost::timer::cpu_timer timer;

    timer.start();
    for (int i = 0; i < TEST_TIMES; ++i){
        result = createVector_98();
    }
    cout << "no move" << timer.format(6) << endl;

    timer.start(); // don't call resume()
    
    for (int i = 0; i < TEST_TIMES; ++i){
        result = createVector_98();
    }
    cout << "use move" << timer.format(6) << endl;

/*************C++11特性*************/
auto i=10;
cout<<"I am C++11, auto i=10:--"<<i<<endl;
return 0;
}


